/****************************************************************************
 * apps/examples/hello/hello_main.c
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.  The
 * ASF licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 ****************************************************************************/

/****************************************************************************
 * Included Files
 ****************************************************************************/

#include <nuttx/config.h>
#include "gpio_definitions.h"
#include <nuttx/fs/ioctl.h>
#include <stdio.h>
#include <fcntl.h>
#include <syslog.h>
#include <stdlib.h>
// #include <tioctl.h>
/****************************************************************************
 * Public Functions
 ****************************************************************************/

/****************************************************************************
 * hello_main
 ****************************************************************************/
void handshake(){
  uint8_t command_in[7]={'\0'};
  int ret, fd1 ,i;
  fd1 = open("/dev/ttyS1", O_RDWR);
  do{
    ret = read(fd1, &command_in[i], 1);
    if(ret >= 0){
      write(fd1, &command_in[i],1);
    }
    // memset(command_in, '\0', sizeof(command_in));
    // ret = read(fd1, command_in, sizeof(command_in));
    // if(command_in[0] == 0x53 | command_in[1] ==0x53){
    //   break;
    // }
  }while(i <=7);
      printf("%s \n", command);
 
  
  if(ret >= 0){
    ret = write(fd1, command_in, sizeof(command_in));
    if(ret >= 0){
      printf("Data sent back to OBC\n");
    }
  }
  ioctl(fd1, TCFLSH, 2);
  ioctl(fd1, TCDRN, NULL);
  close(fd1);

}


int gpio_write(uint32_t pin, uint8_t mode)
{

  gpio_config_s gpio_numval;
  int fd = open(ETX_LED_DRIVER_PATH, O_WRONLY);
  if (fd < 0)
  {
    syslog(LOG_ERR, "Error opening %s for GPIO WRITE...", ETX_LED_DRIVER_PATH);
    close(fd);
    return -1;
  }
  gpio_numval.gpio_num = pin;
  gpio_numval.gpio_val = mode;
  if (gpio_numval.gpio_val > 1 || gpio_numval.gpio_num < 0)
  {
    syslog(LOG_ERR, "Undefined GPIO pin or set mode selected...\n");
    return -2;
  }
  int ret = write(fd, (const void *)&gpio_numval, sizeof(gpio_config_s));
  close(fd);
  if (ret < 0)
  {
    syslog(LOG_ERR, "Unable to write to gpio pin...\n");
  }
  return ret;
}

int main(int argc, FAR char *argv[])
{

  printf("Hello, World!!\n");
  uint32_t counter =0, counter2=0;
  uint8_t fd, ret,data ;
  uint8_t four[4];
  uint8_t data1[3500], data2[3500];
  uint8_t command[] ={'C','A','M','O','N'};
  // sleep(2);
  printf("****************************Starting handshake sequence********************\n");
  handshake();
  sleep(2);
  handshake();
  gpio_write(GPIO_OCP_EN, true);
  sleep(2);
  
  printf("command verified\n Enabling OCP\n");
  // gpio_write(GPIO_OCP_EN, true);
  fd = open("/dev/ttyS3", O_RDWR);
    write(fd, command, sizeof(command));

  while(1)
  {
  ret = read(fd, &data, 1);
  data1[counter] = data;
  if(data1[counter-1] == 0xff && data1[counter] ==0xd9){
    // printf(" %02x %02x\n",data1[counter -1], data1[counter]);
    break;
  }
  counter++;
  }
  close(fd);


 //rgb
// printf("-----------------RGB cam starting-------\n");
// fd = open("/dev/ttyS3", O_RDWR);
//     write(fd, command, sizeof(command));

//   while(1){
//   ret = read(fd, &data, 1);
//   // counter++;
//   data2[counter2] = data;
//   // if(counter %100 ==0){
//   //   printf("Counter is %d\n", counter);
//   // }
//   if(data2[counter2-1] == 0xff && data2[counter2] ==0xd9){
//     printf(" %02x %02x\n",data2[counter2 -1], data2[counter2]);
//     break;
//   }
//   counter2++;
//   }
//   close(fd);

 //rgb


  printf("\n*******************Disabling OCP\n");
  gpio_write(GPIO_OCP_EN, false);

  fd=open("/dev/ttyS1",O_WRONLY);
  printf("\nTotal size of data received : %d \n\n", counter);
  for(int16_t i=0; i<=counter ;i++){
    printf("%02x ", data1[i]);
    write(fd, &data1[i], 1);
  }
// printf("-----------------RGB data starting-------\n");
//  for(int16_t i=0; i<=counter2 ;i++){
//     printf("%02x ", data2[i]);
//     write(fd, &data2[i], 1);
//   }
  uint8_t d[]={0xff, 0xd9};
  write(fd, d, 2);
  write(fd, d, 2);


  write(fd, data1, counter-1);
  close(fd);
  
  return 0;
}
